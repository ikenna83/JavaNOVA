import java.util.*;import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.math.*;import java.io.*;public class Calculator2 extends JFrame implements ActionListener{public static final int approximation = 20;public static final int NumberButton_SIZE = 10;JTextField txtSpace = new JTextField(30);JRadioButton radScientific = new JRadioButton("Scientific");String given = "";String savedGiven = "";String newGiven = "";char c = ' ';double firstnum = 0;int count = 0;int index = 0;double result = 0;Container c2;Container c3;Container c4;JPanel p2;static JPanel p1;static Calculator2 frame;JButton [] NumberBtns = new JButton[NumberButton_SIZE]; JRadioButton radStandard = new JRadioButton("Standard"); JButton btnBack = new JButton("Backspace"); JButton btnCE = new JButton("CE"); JButton btnC = new JButton("C");JButton btnSin = new JButton("sin");JButton btnCos = new JButton("cos"); JButton btnTan = new JButton("tan");JButton btnAsin = new JButton("asin"); JButton btnAcos = new JButton("acos"); JButton btnAtan = new JButton("atan");JButton btnLog = new JButton("log"); JButton btnRad = new JButton("rad");JButton btnDeg = new JButton("deg"); JButton btnSqrt = new JButton("sqrt"); JButton btnPercent = new JButton("%"); JButton btnInverse = new JButton("1/x"); JButton btnLn = new JButton("ln"); JButton btnPower3 = new JButton("x^3"); JButton btnPower2 = new JButton("x^2"); JButton btnFactorial = new JButton("n!"); JButton btnPi = new JButton("pi"); JButton btnInt = new JButton("Int"); JButton btnA = new JButton("A"); JButton btnB = new JButton("B"); JButton btnCC = new JButton("C"); JButton btnD = new JButton("D");{ NumberBtns[1] = new JButton("1"); NumberBtns[2] = new JButton("2"); NumberBtns[3] = new JButton("3"); NumberBtns[4] = new JButton("4"); NumberBtns[5] = new JButton("5"); NumberBtns[6] = new JButton("6"); NumberBtns[7] = new JButton("7"); NumberBtns[8] = new JButton("8"); NumberBtns[9] = new JButton("9"); NumberBtns[0] = new JButton("0");} JButton btnPoint = new JButton("."); JButton btnPlusMin = new JButton("+/-"); JButton btnDivide = new JButton("/"); JButton btnMulti = new JButton("*"); JButton btnAdd = new JButton("+"); JButton btnSub = new JButton("-"); JButton btnAnd = new JButton("&"); JButton btnUnknown = new JButton("|"); JButton btnPower = new JButton("^"); JButton btnEqual = new JButton("="); JButton btnShLeft = new JButton("<<"); JButton btnShRight = new JButton(">>"); JButton btnPow = new JButton("pow"); JButton btnMod = new JButton("mod"); Container c1 = new Container();public Calculator2(){ p1 = new JPanel(); p1.setLayout(new GridLayout(4,7,5,5)); c1.add(p1); for(int count = 0; count <NumberButton_SIZE; count++) {	  NumberBtns[count].setBackground(Color.GRAY);}  p1.add(btnSin); p1.add(btnCos); p1.add(btnTan); p1.add(btnPower3); p1.add(btnPower2); p1.add(btnFactorial); p1.add(btnAsin); p1.add(btnAcos); p1.add(btnAtan); p1.add(btnPi); p1.add(btnInt); p1.add(btnA); p1.add(btnLog); p1.add(btnDeg); p1.add(btnRad); p1.add(btnB); p1.add(btnCC); p1.add(btnD); p1.add(btnSqrt); p1.add(btnPercent); p1.add(btnInverse);    p2 =new JPanel();    p2.setLayout(new GridLayout(4,3,5,5));    for(int i = (NumberButton_SIZE - 1); i >= 0; i--)        {    p2.add(NumberBtns[i]);    }    p2.add(btnPoint);    p2.add(btnPlusMin);    JPanel p3 =new JPanel();    p3.setLayout(new GridLayout(4,3,5,5));    p3.add(btnDivide);    p3.add(btnAnd);    p3.add(btnShLeft);    p3.add(btnMulti);    p3.add(btnUnknown);    p3.add(btnShRight);    p3.add(btnSub);    p3.add(btnPower);    p3.add(btnPow);    p3.add(btnAdd);    p3.add(btnEqual);    p3.add(btnMod);    btnDivide.setBackground(Color.GRAY);    btnAnd.setBackground(Color.GRAY);    btnShLeft.setBackground(Color.GRAY);    btnMulti.setBackground(Color.GRAY);    btnUnknown.setBackground(Color.GRAY);    btnShRight.setBackground(Color.GRAY);    btnSub.setBackground(Color.GRAY);    btnPower.setBackground(Color.GRAY);    btnPow.setBackground(Color.GRAY);    btnAdd.setBackground(Color.GRAY);    btnEqual.setBackground(Color.GRAY);    btnMod.setBackground(Color.GRAY);    btnInverse.setBackground(Color.GRAY);    radScientific.setActionCommand("numbers");    radScientific.setSelected(false);        radStandard.setActionCommand("numbers");    radStandard.setSelected(true);    JPanel p4 =new JPanel();    p4.setLayout(new FlowLayout());    JPanel p5 = new JPanel();    p5.setLayout(new FlowLayout());    p5.add(txtSpace);    JPanel p6 = new JPanel();    p5.setLayout(new FlowLayout());    p6.add(radScientific);    p6.add(radStandard);    p6.add(btnBack);    p6.add(btnCE);    p6.add(btnC);    c1.setLayout(new GridLayout(2,1,0,0));    c1.add(p5, BorderLayout.NORTH);    c1.add(p6, BorderLayout.SOUTH);    getContentPane().add(c1, BorderLayout.NORTH);    getContentPane().add(p1, BorderLayout.SOUTH);     p1.setVisible(false);    getContentPane().add(p2, BorderLayout.CENTER);    getContentPane().add(p3, BorderLayout.EAST);    radScientific.addActionListener(this);    radStandard.addActionListener(this);    for(int count = 0; count < NumberButton_SIZE; count++)     {          NumberBtns[count].addActionListener(this);    }    btnAdd.addActionListener(this);    btnEqual.addActionListener(this);    btnSub.addActionListener(this);    btnMulti.addActionListener(this);    btnDivide.addActionListener(this);    btnBack.addActionListener(this);    btnPower.addActionListener(this);    btnC.addActionListener(this);    btnSin.addActionListener(this);    btnCos.addActionListener(this);    btnAsin.addActionListener(this);    btnAcos.addActionListener(this) ;}//public void actionPerformed(ActionEvent e) {  if(e.getSource() == radStandard) {	  radScientific.setSelected(false);      radStandard.setSelected(true);      p1.setVisible(false);      frame.setSize(400,200);       }    if(radScientific.isSelected()) {    	radScientific.setSelected(true);        radStandard.setSelected(false);         p1.setVisible(true);          frame.setSize(400,330); }    if(e.getSource() == NumberBtns[1]) {    	given = Concatinate(txtSpace.getText(), "1");         txtSpace.setText(given);         count++;  } if(e.getSource() == NumberBtns[2]) {	 given = Concatinate(txtSpace.getText(), "2");      txtSpace.setText(given);       count++;}    if(e.getSource() == NumberBtns[3]) {    	given = Concatinate(txtSpace.getText(),"3");         txtSpace.setText(given);         count++;         }    if(e.getSource() == NumberBtns[4]) {        given = Concatinate(txtSpace.getText(),"4");        txtSpace.setText(given);        count++;    }     if(e.getSource() == NumberBtns[5]) {    	     	 given = Concatinate(txtSpace.getText(), "5");        	 txtSpace.setText(given);         count++; }    if(e.getSource() == NumberBtns[6]) {    	given = Concatinate(txtSpace.getText(), "6");    	txtSpace.setText(given);    	count++;    }    if(e.getSource() == NumberBtns[7]) {    	given = Concatinate(txtSpace.getText(),"7");    	txtSpace.setText(given);    	count++;}    if(e.getSource() == NumberBtns[8]) {    	given = Concatinate(txtSpace.getText(),"8");    	txtSpace.setText(given);    	count++;    }    if(e.getSource() == NumberBtns[9])    {     given = Concatinate(txtSpace.getText(), "9");      txtSpace.setText(given);      count++;    }    if(e.getSource() == NumberBtns[0])    {     given = Concatinate(txtSpace.getText(),"0");     txtSpace.setText(given);      count++;    }    if(e.getSource() == btnPoint)    {      given = Concatinate(txtSpace.getText(),".");       txtSpace.setText(given);       count++;    }    if(e.getSource() == btnAdd)     {      savedGiven = given;        String placeHolder = savedGiven + " + ";        txtSpace.setText(placeHolder);        index = count + 2;        count = 0;        c = '+';    }    if(e.getSource() == btnSub)    {        savedGiven = given;        String placeHolder = savedGiven + " - ";        txtSpace.setText(placeHolder);        index = count + 2;        count = 0;        c = '-';     }     if(e.getSource() == btnMulti)     {        savedGiven = given;        String placeHolder = savedGiven + " * ";        txtSpace.setText(placeHolder);        index = count + 2;        count = 0;        c = '*';    }     if(e.getSource() == btnDivide)    {        savedGiven = given;        String placeHolder = savedGiven + " / ";        txtSpace.setText(placeHolder);        index = count + 2;        count = 0;        c = '/';    }     if(e.getSource() == btnPower)    {        savedGiven = given;        String placeHolder = savedGiven + " ^ ";        txtSpace.setText(placeHolder);        index = count + 2;	    count = 0;        c = '^';     }    if(e.getSource() == btnEqual)    {        firstnum = Double.valueOf(savedGiven.trim()).doubleValue();        String secondValue = given.substring(index);        double secondnum = Double.valueOf(secondValue.trim()).doubleValue();        switch (c){        case('+'):        {            result = Addition(firstnum , secondnum);//Addition --method defined below            String answer =  given + " = " +result;            txtSpace.setText(answer); }         break;        case('-'):           {            result = Subtraction(firstnum, secondnum); //Subtraction --method defined below            String answer =  given + " = " +result;            txtSpace.setText(answer);             }        break;        case('*'):        {            result = Multiplication(firstnum, secondnum); //Multiplication --method defined below            String answer =  given + " = " +result;         txtSpace.setText(answer); }        break;        case('/'):        {            result = Division(firstnum, secondnum); //Division --method defined below            String answer = given + " = " +result;            txtSpace.setText(answer);        }         break;         case('^'):        {            result = Power(firstnum, secondnum);   //Power --method defined below            String answer = given + " = " +result;            txtSpace.setText(answer);      }      break;     }       // }    if (e.getSource() == btnC)    {     txtSpace.setText("");     }    if (e.getSource() == btnBack)     {        int num = (given.length()) - 1;        String Corrected = given.substring(0, num);        txtSpace.setText(Corrected); }    }        }public static void main(String []args){    frame = new Calculator2();        frame.setTitle("Calculator");    frame.setSize(400,200);    frame.setVisible(true);    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    frame.setResizable(false);    }public static double Factorial (double base) //calculates a factorial of a double parameter{  if (base == 1) return 1; else return base * Factorial(base-1);} //Factorial Method Ends herepublic static double Power(double base, double expo) //multiplys the base by its self expo times{ if (expo == 1)  return base; else return base*Power(base, expo-1);} //Power Method Ends herepublic static double Addition(double num1, double num2)//Adds two numbers{ double result = num1 + num2; return result;}//Ends herepublic static double Subtraction(double num1, double num2)//Subtract two numbers{ double result = num1 - num2; return result;}//Ends herepublic static double Multiplication(double num1, double num2)//Multiply two numbers{ double result = num1 * num2;  return result;}//Ends herepublic static double Division(double num1, double num2)//Divide two numbers{ double result = num1 / num2; return result;}//Ends herepublic static String Concatinate(String given, String c){ return given + c;}}